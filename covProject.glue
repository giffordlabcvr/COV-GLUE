run file glue/covInitProject.glue

project cov

  run script glue/covLoadTimeStamp.js
 
  # Clean up sequences from non-version-controlled single fastas which were produced
  # by splitGisaidFasta.sh into and save in single fastas in sources/cov-gisaid, also 
  # save sequence character stats file in tabular.
  run script glue/covGisaidFastaInitialCleanup.js
  
  # import cov-gisaid individual fastas.
  import source sources/cov-gisaid

  # features, master reference, feature locations.
  run file glue/covFeatures.glue
  run file glue/covMasterReference.glue
  run script glue/covCheckFeatureLocations.js

  # various other bits of sequence data and metadata
  run script glue/covSetSequenceLengths.js 

  # have to temporarily change result format to avoid bug in table rendering library.
  console set cmd-result-format tab
  module covGisaidAcknowledgementsTextFilePopulator populate --fileName tabular/gisaid_cov2020_acknowledgement_table.txt
  module covGisaidMetadataTextFilePopulator populate --fileName tabular/gisaid_metadata.txt
  module covSeqStatsTextFilePopulator populate -f tabular/gisaidSeqCharacterStats.txt
  console unset cmd-result-format
  # PANGOLIN lineage assignments and representative flag.
  run script glue/covLoadPangLineages.js

  # deals with case where FASTA is ahead of either GISAID metadata (submission_year = null) or 
  # GISAID acknowledgements (isolate = null).
  # in this case we just remove these sequences.
  # the reverse case is dealt with by skipMissing flags in the TextFilePopulators above.
  delete sequence -w "source.name = 'cov-gisaid' and (submission_year = null or isolate = null)"

  # populate the constrained alignment.
  create alignment AL_GISAID_CONSTRAINED -r REF_MASTER_WUHAN_HU_1 
  alignment AL_GISAID_CONSTRAINED add member -a
  compute alignment AL_GISAID_CONSTRAINED covMafftAligner
  
  # now this has been populated we can count the unique SNPs
  run script glue/covCountUniqueSNPs.js


  # all sequences excluded from the reference tree by default
  multi-set field sequence -a include_in_ref_tree false

  # currently, include in ref tree iff sequence is flagged as a PANGOLIN representative
  multi-set field sequence -w "pang_representative = true" include_in_ref_tree true

  # compute the unconstrained alignment
  run file glue/covUnconstrainedAlignment.glue

  # generate the reference tree
  run file glue/covGeneratePhylogeny.glue
  # import unrooted tree so we can set ORF8 position 84 amino acid . 
  module covPhyloImporter
    import phylogeny AL_GISAID_UNCONSTRAINED -w "sequence.include_in_ref_tree = true" -i trees/globalRefTreeUnrooted.tree NEWICK_BOOTSTRAPS -f phylogeny
    exit
  run script glue/covSetOrf8Aa84.js
  # reroot phylogeny and export display tree, this has the side effect of loading the final ref tree
  run file glue/covRerootPhylogeny.glue
  
  # set the pangolin lineage as internal node properties in the reference tree.
  # this allows assignment of lineages to work.
  module covAssignLineages invoke-function setLineagesInTree
  
  # assign and store lineages for all sequences.
  # run script glue/covAssignAndStoreLineages.js

  # load the primer/probe data
  run script glue/covLoadPrimerProbes.js
  
  # generate deletions
  # run script glue/covGenerateGisaidDeletions.js

  # generate replacements
  # run script glue/covGenerateGisaidReplacements.js

  # generate insertions
  # run script glue/covGenerateGisaidInsertions.js

  # run file glue/covSanitisedExports.glue

  # Validate
  validate

exit
